@use "sass:color";
@use "sass:map";

// General
* {
	box-sizing: border-box;
	-moz-box-sizing: border-box;
	-webkit-box-sizing: border-box;
}
html {
	font-size: 10px;
}

body {
	font-size: 1.4rem;
	font-family: $text-font-family;
}

h1,
h2,
h3,
h4,
h5,
h6,
p {
	margin: 0;
}

h1,
h2,
h3,
h4,
h5,
h6,
button {
	font-family: $header-font-family;
}

// Text decoration
.bold {
	font-weight: bold;
}

.italic {
	font-style: italic;
}

// Sizing
@mixin size-font($font-type, $size, $value) {
	.#{$font-type}-#{$size} {
		font-size: $value;
	}
}
@include size-font("text", "xs", 1rem);
@include size-font("text", "s", 1.4rem);
@include size-font("text", "m", 1.8rem);
@include size-font("text", "l", 2.4rem);
@include size-font("text", "xl", 3.6rem);

@mixin responsive-size-icon($dimension) {
	.icon-#{$dimension} {
		@if $dimension == "w" {
			width: 100%;
			height: auto;
		} @else {
			width: auto;
			height: 100%;
		}
	}
}
@include responsive-size-icon("w");
@include responsive-size-icon("h");

.card {
	border-radius: 0.5rem;
	box-shadow: 0 0 5px #333;
}

.fixed-width {
	width: min(100%, 768px);
	margin-left: auto;
	margin-right: auto;
}

// Flex options
@mixin flex-type($flex-direction, $justify-type) {
	.#{$flex-direction}-#{$justify-type} {
		display: flex;
		flex-direction: $flex-direction;
		justify-content: $justify-type;
	}
}
@include flex-type(row, space-between);
@include flex-type(column, center);

// Themes
@function get-inactive-color($color) {
	@if color.whiteness($color) >= 50% {
		@return darken($color, 30%);
	} @else {
		@return lighten($color, 30%);
	}
}
@function get-active-color($color) {
	@if color.whiteness($color) >= 50% {
		@return lighten($color, 30%);
	} @else {
		@return darken($color, 30%);
	}
}
@mixin theme($theme-name) {
	.theme__#{$theme-name} {
		background-color: map-get($theme-colors, $theme-name, "bg");
		color: map-get($theme-colors, $theme-name, "text");

		.bg-secondary {
			background-color: map-get($theme-colors, $theme-name, "bg-header");
		}

		.text-primary {
			color: map-get($theme-colors, $theme-name, "text");
		}

		.text-header {
			color: map-get($theme-colors, $theme-name, "header");
		}

		input,
		select,
		button,
		.button {
			background-color: map-get($theme-colors, $theme-name, "bg-header");
			color: map-get($theme-colors, $theme-name, "text");
			border: 1px solid lighten(map-get($theme-colors, $theme-name, "bg-header"), 10%);
			outline: none;
		}

		.link {
			color: map-get($theme-colors, $theme-name, "accent");
		}

		.sidebar-button {
			@extend .button;
			border: none;

			svg {
				fill: get-inactive-color(map-get($theme-colors, $theme-name, "text"));
			}

			.text-primary {
				color: get-inactive-color(map-get($theme-colors, $theme-name, "text"));
			}
		}

		.active-sidebar-button {
			@extend .sidebar-button;

			svg {
				fill: get-active-color(map-get($theme-colors, $theme-name, "text"));
			}

			.text-primary {
				color: get-active-color(map-get($theme-colors, $theme-name, "text"));
			}
		}

		.canvas-button {
			@extend .button;
			border: none;
		}

		svg {
			fill: map-get($theme-colors, $theme-name, "text");
		}

		button:hover,
		.button:hover {
			background-color: lighten(map-get($theme-colors, $theme-name, "bg-header"), 10%);
		}

		.border-bottom {
			border-bottom: 1px solid lighten(map-get($theme-colors, $theme-name, "bg-header"), 10%);
		}

		.border {
			border: 1px solid lighten(map-get($theme-colors, $theme-name, "bg-header"), 10%);
		}

		.accent {
			color: map-get($theme-colors, $theme-name, "accent");
		}

		.card {
			background-color: map-get($theme-colors, $theme-name, "bg-header");
			color: map-get($theme-colors, $theme-name, "text");
			border: 1px solid lighten(map-get($theme-colors, $theme-name, "bg-header"), 10%);
		}
	}
}
@include theme("dark");
@include theme("light");
